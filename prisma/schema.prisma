// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

enum ProductSizes {
  SMALL
  MEDIUM
  LARGE
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  image       String
  order       Int         @default(autoincrement())
  basePrice   Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  sizes       Size[]
  extras      Extra[]
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  OrderItem   OrderItem[]
}

model Size {
  id        String       @id @default(cuid())
  name      ProductSizes
  price     Float
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  OrderItem OrderItem[]
}

enum ExtraIngredients {
  CHEESE
  BACON
  TOMATO
  ONION
  PEPPER
}

model Extra {
  id          String           @id @default(cuid())
  name        ExtraIngredients
  price       Float
  product     Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  OrderItem   OrderItem?       @relation(fields: [orderItemId], references: [id])
  orderItemId String?
}

model Category {
  id       String    @id @default(uuid())
  name     String
  order    Int       @default(autoincrement())
  products Product[]
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
  extras    Extra[]
  size      Size     @relation(fields: [sizeId], references: [id])
  sizeId    String
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        String      @id @default(cuid())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  items     OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}
